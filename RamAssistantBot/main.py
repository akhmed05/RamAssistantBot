import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import openai

from config import BOT_TOKEN, OPENAI_API_KEY
from handlers import handle_youtube_summary, handle_google_form_submission

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    KeyboardButton("üìπ YouTube-—Å–∞–º–º–∞—Ä–∏"),
    KeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI")
).add(
    KeyboardButton("üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"),
    KeyboardButton("üìé –ü–æ–ª—É—á–∏—Ç—å PDF")
)

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.answer("–ê—Å-—Å–∞–ª—è–º—É –∞–ª–µ–π–∫—É–º! –Ø RamAssistantBot. –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é:", reply_markup=main_menu)

@dp.message_handler(lambda m: m.text == "üìπ YouTube-—Å–∞–º–º–∞—Ä–∏")
async def youtube_summary_prompt(message: types.Message):
    await message.reply("–í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ:")

@dp.message_handler(lambda m: m.text and ("https://www.youtube.com" in m.text or "youtu.be" in m.text))
async def youtube_summary_handler(message: types.Message):
    summary = handle_youtube_summary(message.text)
    await message.reply(summary or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º–º–∞—Ä–∏.")

@dp.message_handler(lambda m: m.text == "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI")
async def ask_ai_prompt(message: types.Message):
    await message.reply("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")

@dp.message_handler(lambda m: m.reply_to_message and "–≤–æ–ø—Ä–æ—Å" in m.reply_to_message.text.lower())
async def ask_ai_handler(message: types.Message):
    openai.api_key = OPENAI_API_KEY
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": message.text}]
    )
    await message.reply(response.choices[0].message.content)

@dp.message_handler(lambda m: m.text == "üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def google_form_prompt(message: types.Message):
    await message.reply("–ù–∞–ø–∏—à–∏ –∑–∞—è–≤–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è / –¢–µ–ª–µ—Ñ–æ–Ω / –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

@dp.message_handler(lambda m: m.reply_to_message and "–∑–∞—è–≤–∫—É" in m.reply_to_message.text.lower())
async def google_form_handler(message: types.Message):
    result = handle_google_form_submission(message.text)
    await message.reply("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!" if result else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.")

@dp.message_handler(lambda m: m.text == "üìé –ü–æ–ª—É—á–∏—Ç—å PDF")
async def send_pdf(message: types.Message):
    try:
        with open("media/info.pdf", "rb") as f:
            await message.reply_document(f)
    except FileNotFoundError:
        await message.reply("PDF –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
